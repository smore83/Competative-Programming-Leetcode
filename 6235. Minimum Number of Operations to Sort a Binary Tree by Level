class Solution {
public:
    int minSwapsatlevel(vector<int>&nums)
	{
	    // Code here
	    int n=nums.size();
	    vector<pair<int,int>>v;
	    for(int i=0;i<n;i++){
	        v.push_back({nums[i],i});
	    }
	    sort(v.begin(),v.end());
	    
	    int swaps=0;
	    
	    for(int i=0;i<n;i++){
	        int num=v[i].first;
	        int index=v[i].second;
	        if(i!=index){
	            swaps++;//jar map madhli ani hi strint chi index vegli asel tar element change zalay
	            
	            swap(v[i],v[index]);
	            i-=1;
	        }
	        
	    }
	    return swaps;
	}
    int minimumOperations(TreeNode* root) {
      TreeNode* temp;
      queue<TreeNode*>q;
      //vector<int>v;
      q.push(root);
        int ans=0;
        
      while(!q.empty()){
          int n=q.size();
           queue<TreeNode*>q2(q);
          vector<int>vs;
         for(int i=0;i<n;i++){
             temp=q.front();
            q.pop();
          vs.push_back(temp->val);
          if(temp->left)
          {
              q.push(temp->left);
          }
          if(temp->right){
                  q.push(temp->right);
          }
          }
          ans+=minSwapsatlevel(vs);
         vs.clear();
      }
       return ans;
        
    }
};
